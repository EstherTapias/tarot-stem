import React from 'react';
import type { SelectedCard, Position } from '../../types/tarot';
import styles from './Reading.module.css';

interface ReadingProps {
  selectedCards: SelectedCard[];
  isComplete: boolean;
  onCardClick?: (card: any) => void;
  showInterpretation?: boolean;
  className?: string;
}

export const Reading: React.FC<ReadingProps> = ({
  selectedCards,
  isComplete,
  onCardClick,
  showInterpretation = false,
  className = ''
}) => {
  // Obtiene carta por posici√≥n
  const getCardByPosition = (position: Position) => {
    return selectedCards.find(sc => sc.position === position);
  };

  // Etiquetas de posici√≥n
  const getPositionLabel = (position: Position): string => ({
    past: 'Pasado',
    present: 'Presente', 
    future: 'Futuro'
  }[position]);

  // Descripciones de posici√≥n
  const getPositionDescription = (position: Position): string => ({
    past: 'Las energ√≠as que te han formado y las lecciones aprendidas',
    present: 'Tu situaci√≥n actual y las fuerzas que te rodean',
    future: 'El camino que se abre ante ti y las posibilidades por venir'
  }[position]);

  // Interpretaci√≥n general
  const getGeneralInterpretation = (): string => {
    if (!isComplete) return '';
    
    const pastCard = getCardByPosition('past');
    const presentCard = getCardByPosition('present');
    const futureCard = getCardByPosition('future');

    return `Tu lectura revela una conexi√≥n profunda entre la sabidur√≠a ancestral del ${pastCard?.card.arcaneName}, 
    la energ√≠a presente de ${presentCard?.card.arcaneName}, y las posibilidades futuras que trae 
    ${futureCard?.card.arcaneName}. La ciencia y el misticismo se entrelazan en tu destino, 
    donde ${pastCard?.card.goddessName}, ${presentCard?.card.goddessName} y ${futureCard?.card.goddessName} 
    gu√≠an tu camino hacia el conocimiento y la transformaci√≥n.`;
  };

  if (selectedCards.length === 0) {
    return (
      <div className={`${styles.readingContainer} ${className}`}>
        <div className={styles.emptyReading}>
          <div className={styles.emptyIcon}>üîÆ</div>
          <h3 className={styles.emptyTitle}>Lectura en Preparaci√≥n</h3>
          <p className={styles.emptyText}>
            Las cartas est√°n esperando ser seleccionadas para revelar tu destino
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={`${styles.readingContainer} ${className}`}>
      {/* T√≠tulo de la lectura */}
      <header className={styles.readingHeader}>
        <h2 className={styles.readingTitle}>
          {isComplete ? 'üåü Tu Lectura Completa üåü' : 'üîÆ Lectura en Progreso'}
        </h2>
        <div className={styles.readingProgress}>
          <div className={styles.progressSteps}>
            {['past', 'present', 'future'].map((position, index) => {
              const hasCard = getCardByPosition(position as Position);
              return (
                <div 
                  key={position} 
                  className={`${styles.progressStep} ${hasCard ? styles.completed : ''}`}
                >
                  <div className={styles.stepNumber}>{index + 1}</div>
                  <div className={styles.stepLabel}>{getPositionLabel(position as Position)}</div>
                </div>
              );
            })}
          </div>
        </div>
      </header>

      {/* Spread de cartas */}
      <main className={styles.readingSpread}>
        <div className={styles.spreadLayout}>
          {['past', 'present', 'future'].map((position) => {
            const selectedCard = getCardByPosition(position as Position);
            
            return (
              <div key={position} className={styles.positionSlot}>
                <div className={styles.positionHeader}>
                  <h3 className={styles.positionTitle}>
                    {getPositionLabel(position as Position)}
                  </h3>
                  <p className={styles.positionDescription}>
                    {getPositionDescription(position as Position)}
                  </p>
                </div>

                <div className={`${styles.cardSlot} ${selectedCard ? styles.filled : styles.empty}`}>
                  {selectedCard ? (
                    <div 
                      className={styles.selectedCard}
                      onClick={() => onCardClick?.(selectedCard.card)}
                    >
                      {/* Imagen del Arcano */}
                      <div className={styles.cardImage}>
                        <img 
                          src={selectedCard.card.arcaneImage.imageSrc} 
                          alt={selectedCard.card.arcaneName}
                          className={styles.arcaneImage}
                        />
                        <div className={styles.cardOverlay}>
                          <div className={styles.cardInfo}>
                            <h4 className={styles.cardName}>{selectedCard.card.arcaneName}</h4>
                            <p className={styles.cardNumber}>#{selectedCard.card.id}</p>
                          </div>
                        </div>
                      </div>

                      {/* Informaci√≥n de la carta */}
                      <div className={styles.cardDetails}>
                        <div className={styles.cardTitle}>
                          <h4 className={styles.arcaneName}>{selectedCard.card.arcaneName}</h4>
                          <h5 className={styles.goddessName}>{selectedCard.card.goddessName}</h5>
                        </div>

                        {/* Vista cient√≠fica peque√±a */}
                        <div className={styles.scientificPreview}>
                          <img 
                            src={selectedCard.card.goddessImage.imageSrc} 
                            alt={selectedCard.card.goddessName}
                            className={styles.scientificImage}
                          />
                          <div className={styles.scientificLabel}>üî¨ STEM Pioneer</div>
                        </div>
                      </div>

                      {/* Bot√≥n de detalles */}
                      <button 
                        className={styles.detailsButton}
                        onClick={(e) => {
                          e.stopPropagation();
                          onCardClick?.(selectedCard.card);
                        }}
                      >
                        üìñ Ver Detalles
                      </button>
                    </div>
                  ) : (
                    <div className={styles.emptySlot}>
                      <div className={styles.slotIcon}>
                        {position === 'past' && '‚è≥'}
                        {position === 'present' && '‚≠ê'}
                        {position === 'future' && 'üîÆ'}
                      </div>
                      <p className={styles.slotText}>
                        Esperando carta...
                      </p>
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </main>

      {/* Interpretaci√≥n completa */}
      {isComplete && showInterpretation && (
        <section className={styles.interpretationSection}>
          <h3 className={styles.interpretationTitle}>
             Interpretaci√≥n de tu Lectura
          </h3>
          
          <div className={styles.interpretationContent}>
            <div className={styles.generalInterpretation}>
              <h4 className={styles.interpretationSubtitle}>üìú Mensaje General</h4>
              <p className={styles.interpretationText}>
                {getGeneralInterpretation()}
              </p>
            </div>

            {/* Interpretaciones por posici√≥n */}
            <div className={styles.positionInterpretations}>
              {selectedCards.map((selectedCard) => (
                <div key={selectedCard.position} className={styles.positionInterpretation}>
                  <div className={styles.interpretationHeader}>
                    <h4 className={styles.interpretationPosition}>
                      {getPositionLabel(selectedCard.position)}
                    </h4>
                    <div className={styles.interpretationCard}>
                      <span className={styles.interpretationArcane}>
                        {selectedCard.card.arcaneName}
                      </span>
                      <span className={styles.interpretationGoddess}>
                        {selectedCard.card.goddessName}
                      </span>
                    </div>
                  </div>
                  
                  <div className={styles.interpretationBody}>
                    <p className={styles.arcaneInterpretation}>
                      <strong>üîÆ Energ√≠a M√≠stica:</strong> {selectedCard.card.arcaneDescription}
                    </p>
                    <p className={styles.goddessInterpretation}>
                      <strong>üî¨ Sabidur√≠a Cient√≠fica:</strong> {selectedCard.card.goddessDescription}
                    </p>
                  </div>
                </div>
              ))}
            </div>

            {/* Consejo final */}
            <div className={styles.finalAdvice}>
              <h4 className={styles.adviceTitle}>‚ú® Consejo del Cosmos ‚ú®</h4>
              <p className={styles.adviceText}>
                La fusi√≥n entre misticismo y ciencia en tu lectura sugiere que el camino hacia 
                la sabidur√≠a requiere tanto intuici√≥n como raz√≥n. Abraza tanto el misterio 
                como el conocimiento, pues en su equilibrio encontrar√°s tu verdadero poder.
              </p>
            </div>
          </div>
        </section>
      )}

      {/* Estado de completitud */}
      {isComplete && (
        <footer className={styles.readingFooter}>
          <div className={styles.completionBadge}>
            <span className={styles.badgeIcon}>üéâ</span>
            <span className={styles.badgeText}>Lectura Completa</span>
          </div>
          <p className={styles.footerText}>
            Tu destino ha sido revelado. Las cartas han hablado.
          </p>
        </footer>
      )}
    </div>
  );
};